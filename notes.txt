4th Sep 2025
============

App Development 

    -> Backend (Business Logics)

    -> Java : Java is a high-level, general-purpose, memory-safe, object-oriented programming language. It is intended to let programmers write once, run anywhere, meaning that compiled Java code can run on all platforms that support Java without the need to recompile.

    -> Programming Language : Communicate with Computers (Machines)

    -> Human To Human : English, Hindi, Telugu etc

    -> Machines cannot understand English, Hindi, Telugu etc

    -> Machines can understand Machine / Binary Language (010101010001)

        -> 01101010 01100001 01110110 01100001 --> java

        -> Low Level Language

    -> Java is a high-level Language (Application Development)

     -> Java is a general-purpose Language 

        -> Used only for multiple purposes

                -> Java can i build desktop apps -> YES
                -> Java can i build web apps -> YES
                -> Java can i build API's -> YES

        -> Domain Specific Languages : Used only for specific purpose 
            
            -> SQL (Structured Query Language) is a domain-specific language used to manage data, especially in a relational database management system.

                -> SQL can i build desktop apps -> NO
                -> SQL can i build web apps -> NO
                -> SQL can i build API's -> NO

    -> Programming Paradigms 

        -> Paradigm : Way To Solve To Problem / Structure 

            -> Imperative : HOW TO DO (Java)

            -> Declarative : WHAT TO DO (SQL)

    -> Compiled Languages : Java 

        -> Best In Performance (Speed Of App) 

        -> Enterprise 
        -> Banking (Finance)
        -> Security (Govt / Defense )

    -> Interpreted Languages : Python

        -> Low In Performance

            -> Data Science (AI / ML / DL)
            -> Data Analytics 
            -> Scripting 

        -> Very Good Proto Type Language (Research)

        -> Speed Of Development 


-> RoadMap 

    -> Core Java (Language Fundamentals) (No Projects) (11 AM)

        -> Front End (HTML + CSS + JS + REACT) - Parallel ()

    -> Advance Java - Projects
        -> Frameworks 
            -> Collections Framework
            -> Database (SQL + JDBC)
            -> Web Apps (Spring + Spring Boot)
    
    -> Cloud & DevOps - Deployment 

5th Sep 2025
============

    -> Hardware Spec:

        -> i5 / i3 processor 
        -> 8 GB RAM 
        -> 500 GB HDD

    -> Softwares:

        -> Install Java Development Kit (JDK) -- Runtime Setup (Environment Setup)
        
        -> IDE : Integrated Development Environment

            -> Writing Code IDE
            -> Visual Studio Code (VS Code)
            
        -> Version Control Systems (VCS)

            -> Tracking Project Code (web site files, programs, docs etc)

            -> Git 

                -> Git is client software, i.e installed in developer laptop

            -> GitHub 

                -> Github is a platform offered as a service, to store source code

                -> Every developer will create an account on Github (github.com)

                -> Project : Repository (Remote Repository)

                -> Cloning : Make a identical copy 

                    -> A developer will clone Remote Repository using Git client 

                    -> Where we cloned ? 

                        -> In side developer laptop to some path/location (downloads, desktop etc)
                    
                    -> Project : Repository In Laptop (Local Repository)

                    -> As a developer --> Task for building employee salary sorting 

                        -> Start writing code inside Local Repository (laptop)

                            -> Complex Apps (Lots of Files i.e Code)

                                -> not_working_code (Working Area)
                                -> partially_working_code (Staging Area)
                                -> working_code (Local Area)


            -> Integrate Git, GitHub & VS Code

8th Sep 2025
============

    -> Install Java 

        -> java --version 

        -> Download From : https://www.oracle.com/java/technologies/downloads/

            -> LTS(Long Term Support) Version - 21 (JDK - Java Development Kit)
        
    -> Install IDE 

        -> Visual Studio Code - VS Code (Writing Code)

        -> https://code.visualstudio.com/download
    
    -> Install Git (Tracking Code)

        -> https://code.visualstudio.com/download
    
    -> Create GitHub Account

        -> http://github.com/

        -> Create Repository (Project) : Remote Repository

            -> Add README (first commit)

            -> Cloned Repository

            -> Local System (Local Repository)

            -> Register Developer Details (Using Git Bash)

                -> From Start Menu (GitBash)

                -> git config --global user.name github_user_id

                -> git config --global user.email github_email_id
            
            -> Start Writing Code & Track Code & Commit Code & Push Code

9th Sep 2025
============

    -> Write Code : Instructing what task to perform 
    
    -> Compilation : Convert Source Code To Intermediate Byte Code (.class file) (It will verify Syntax)

        -> Syntax : Rules / Guidelines 

            -> Every Java File must start with (class, interface, enum, or record expected)

                -> class is must for beginner level
                -> proper method declaration should be given (main method is starting point of a program) 
                -> main method declaration/signature :
                    public static void main(String [] args) {

                    } 

                    -> public : access modifier (visibility control)
                    -> static : keyword that says no need of object to perform operation 
                    -> void : keyword that says we will not return anything (void means nothing)
                    -> main : method name 
                    -> String : data type for text kind of data 
                    -> [] : Array data 
                    -> args : arguments 

                -> ; indicates end of statement 

                -> text data in java is represented using "text"

                -> cannot find symbol : print

                -> NOTE : You want to print in java then use following Syntax
                            System.out.println("Welcome")


        -> javac (Java Compiler) : utility / tool which is part of JDK installation

        -> To peform Compilation : javac App.java 

            -> App.java 

                print(Welcome)

            -> After Compilation : App.class (Byte Code)

                -> error: class, interface, enum, or record expected

                    class Hello {
                        print(Welcome)
                    }

                ->  error: invalid method declaration

                    class Hello {
                        public static void main(String [] args) {
                            print(Welcome)
                        }
                    }

                ->  error: error: ';' expected

                    class Hello {
                        public static void main(String [] args) {
                            print(Welcome);
                        }
                    }

                -> error: cannot find symbol
                            print(Welcome);
                                ^
                    symbol:   variable Welcome
                
                -> Print data of type text 

                    -> text data in java is represented using "text"

                    class Hello {
                        public static void main(String [] args) {
                            print("Welcome");
                        }
                    }
                
                -> error: cannot find symbol
                        print

                        class Hello {
                            public static void main(String [] args) {
                                System.out.println("Welcome");
                            }
                        }

            -> NOTE : Success (output is Hello.class file)

                -> The file is not displayed in the text editor 
                because it is either binary or uses an unsupported text encoding.

            -> java(jvm java virtual machine will be invoked) is the command we use to interpret byte code

                -> Syntax : java ClassName 

        -> Any Java Programming

                                                            javac        no issues
            -> App.java (Source Code / Human Readable) -> Comiplation -> App.class -> JVM -> Machine (10101)

        -> Java Slogan : Write Once Run Anywhere (WORA)

10th Sep 2025
=============

-> JVM - JRE - JDK

    -> JVM : Java Virtual Machine 

        -> Virtual Machine : Logical Machine inside a physical machine

        -> Role : Convert Byte Code To Machine Code 

    -> JRE : Java Runtime Environment 

        -> Runtime : Provide required infrstructure to operate the programs

        -> JRE it includes JVM

        -> JRE is needed to run java applications (so no javac)
        
        -> NOTE : End User needs JRE to run the Java Application

    -> JDK : Java Development Kit

        -> Provides Tools Needed for Application Development (javac & java)

        -> As a developer you'll be installing JDK

        -> JDK includes JRE also JVM as part of JRE 

        -> JDK : Allows Developers to Write Code, Compile Code & Run Code


-> Variables : A variable is name of memory(RAM) location, which is used to store data

    -> Variables Allow you to

        -> Assign Data (Value)
        -> Retrieve Data
        -> Manipulate Data (If Required)

    -> Syntax 

        datatype variable_name = value;

        datatype -> classification of data (numbers, decimals, text etc)
        variable_name -> label (like box example)
        = -> assignment operator
        value -> 1000(price), 3.5(rating), "Nike"(brand)

    -> NOTE : // used for comment, this line will be ignored

    -> If you want to store any data, defining data type is must and also 
        datatype should be appropriate type based on value being stored

        -> if you have whole numbers, then datatype is int 
        -> if you have decimal numbers, then datatype is double
        -> if you have text data, then datatype is String
            -> Strings should be enclosed in "value"

    
-> Data Type : Datatype inside java define what kind of value a variable can hold

    -> Classification Of Datatype

        -> Primitive Data Types (Simple) (Predefined)

            -> Most Basic Type Of Data already prebuilt in java

            -> Java has 8 Primitive Data Types

                -> byte : stores integers from -128 to 127 [ Size : 1 Byte] 
                -> short : stores integers from -32768 to 32767 [ Size : 2 Bytes]
                -> int : stores integers from -2^31 to 2^31-1 [ Size : 4 Bytes]
                        -2,147,483,648 to 2,147,483,647
                -> long : stores integers from [ Size : 8 Bytes]
                        -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807

                -> float : stores single precision decimal numbers [ Size : 4 Bytes]
                            1.5, 3.5, 10.0 etc
                -> double : stores double precision decimal numbers [ Size : 8 Bytes]
                            299792458.0000000, 3.14595860669   

                -> char : store sing;e character [ Size : 2 Bytes]
                            'a' '$'
                
                -> boolean : stores either true or false [ Size : 1 Byte]

        -> Non-Primitive Data Types (Complex) (User defined)

            -> String : Complex data type (prebuilt)
            -> Arrays : Complex data type (prebuilt)

            -> Student : Complex data type (User defined)

11th Sep 2025
=============

    -> Output 

    -> Concatenation 

        -> Strings ( joining multiple strings) we use + operator 
        -> Strings with other data types 
        
-> Manipulate Data (If Required)

-> Operators 

    -> Special Symbols, perform operations on Variables and values

    -> Operators Classification

        -> Arithmetic Operators

            -> Used to perform Mathematical Calculations

                -> + - * / % 
            
        -> Increment / Decrement Operators  
            -> Used in Looping Statements
            -> Update(increase) a value by 1 called as Increment ++
            -> Update(decrease) a value by 1 called as Decrement --

        -> Compound Assignment Operators

            -> = Assignment Operator

            -> Combining Arithmetic and Assignment
            -> Used for concise code (short hand code)

            -> x = 10
            -> x = x + 5 -> 15

            -> x = 10
            -> x+= 5 (x = x + 5 )
        
        -> Relational / Comparison Operators

            -> Used To Compare values
            -> Result will be boolean (true/false)

                -> == (equality)
                -> != (not equal)
                -> > 
                -> <
                -> >=
                -> <=
        
        -> Logical Operators

            -> Used to combine multiple conditions 
            -> Result will be boolean (true/false)

                -> && (AND) : returns true, when both conditions are true
                -> || (OR) : returns true, when either of conditions is true 
                -> ! (NOT) : negates (true -> false or false -> true)

                X       Y         X && Y    X || Y    ! X    ! Y
                T       T           T         T         F       F
                T       F           F         T         F       T
                F       T           F         T         T       F
                F       F           F         F         T       T     


        -> Bitwise Operators

            -> Used is low level programming (01010101)

                -> & (AND) : when both bits are 1, then result is 1
                    
                    1       1   -   1
                    1       0   -   0
                    0       1   -   0
                    0       0   -   0

                    
                -> | (OR) : either one of bit is 1, then result is 1
                -> etc

12th Sep 2025
=============

-> Install Extension : Extension Pack for Java

    -> Folder Structure can be achieved using packages 

-> Control Structures / Statements  

    -> In Java, control Statements helps you control the flow of execution 

    -> Control Structures Categories 

        -> Conditional Statements (Decision Making Statements)

        -> Looping Statements (Iteration Statements)

        -> Branching Statements (Jump Statements) 

    -> Conditional Statements 

        -> if statement : runs block of code if the condition is true

            if (condition is true) {
                statements
            }

        -> if-else statement : runs one block of code if condition is true, and run another
            block of code if condition is false

                if (condition is true) {
                    statements
                } else {
                    statements
                }
            
            -> NOTE : Ternary operator / conditional operator, allows to write
            concise form of if-else 

                -> Syntax : variable = (condition) ? value_if_true:value_if_false

                -> Use when assigning a value to variable based on condition 

        -> else if ladder : used when you have multiple conditions to check

                if (condition is true) {
                    statements
                } else if (condition is true) {
                    statements
                } else if (condition is true) {
                    statements
                } else if (condition is true) {
                    statements
                } else {
                    statements
                }

        -> switch statement : alternative to if-else with multiple conditions 

            switch(expression) {
                case value1:
                    // statement
                    break;
                case value2:
                    // Statements
                    break;
                    .
                    .
                    .
                default:
                    // Statements
                    break;
            }

13th Sep 2025
=============

-> Scanner in java is part of java.util (common utilities) package(collection of related classes)

-> Scanner class will help in reading input 

-> Scanner class has inbuilt methods 

    -> nextInt() : reads integer values
    -> nextDouble() : reads decimal values
    -> next() : reads next word (string)
    -> nextLine() : reads entire line (string)
    -> etc 

-> Nested Conditionals : Conditional inside Conditionals


15th Sep 2025
=============

-> Looping Statements (Iteration Statements)

    -> Looping statements are used to execute a block of code repeatedly, based on condition

    -> Repetition, Automation etc

    -> Looping Types:

        -> for loop : used when you know number of Iterations / Repetitions in advance

            for (init;condition;Increment/Decrement) {
                statements
            }

        -> while loop : used when you don't know number of Iterations / Repetitions in advance 

            int count = 1;
            while (count <=5) {
                System.out.println(count); 
                count++;
            }

        -> do while loop : similar to while, but runs the code at least once, before checking the condition     

        -> Nested Loops : Loops inside Loops

            -> Table : rows & columns 
            
                -> 

    -> Branching Statements (Jump Statements) 

        -> break : used inside loops, to terminate (immediately exit) (already used in switch-case)
        -> continue : used to skip current iteration
        -> return : used to return a value

16th Sep 2025
=============

-> OOPS 

    -> Object Oriented Programming 

    -> OOPS : We Structure Programs using Data and Behavior (Objects)

    -> To work with OOPS Style we need an understanding of

        -> Classes

        -> Objects 

        -> Methods 

        -> Inheritance 

        -> Encapsulation 

        -> Abstraction 

        -> Polymorphism 

-> Any thing can in real world can be considered as Object

    -> Laptop 
    -> TV 
    -> Phone 
    -> Pen 
    -> etc 

-> Every Object has Data and Behavior (Objects)

    -> Laptop 

        -> Data (characteristics) (has)

            -> Laptop Brand = String
            -> Laptop Price = double 
            -> Laptop Weight = double / int 
            -> Laptop 4k Display = boolean 
            -> etc

        -> Behavior (actions) (do)

            -> Laptop can play video 
            -> Laptop can play audio
            -> Laptop can read file
            -> Laptop can take snap
            -> etc 


-> Class 

    -> Class is a blueprint for creating Objects 

    -> Class will have What Data (characteristics - variables) and Behavior (actions - methods)

    -> Laptop (Class)

            -> Apple Object
                -> Laptop Brand = Apple
                -> Laptop Price = 1000000 
                -> Laptop Weight = 1.2
                -> Laptop 4k Display = true 
                -> etc

                -> Apple Laptop can play video (4k)
                -> Apple Laptop can play audio (25watts)
                -> Apple Laptop can read file (in 2 sec)
                -> Apple Laptop can take snap (12MP)
                -> etc 

            -> Dell Object
                -> Laptop Brand = Dell
                -> Laptop Price = 65000 
                -> Laptop Weight = 2.5
                -> Laptop 4k Display = false 
                -> etc

                -> Dell Laptop can play video (1080p)
                -> Dell Laptop can play audio (10watts)
                -> Dell Laptop can read file (in 5 sec)
                -> Dell Laptop can take snap (5MP)
                -> etc

        -> Behavior (actions) (do)

    
-> Methods 

    -> Behavior (actions)

    -> A method is block of code that performs some task 


-> Variables 

    -> represents data (memory location)

    -> Types Of Variables 

        -> Instance Variables

            -> Created inside the class and outside the method, without static keyword

            -> Instance : Object of an class 

            -> Instance Variables : Variables associated with objects 

            -> Memory is allocated when object is created

            -> Can have default values, if not initialized

            -> Store in Heap Memory / Area


        -> Local Variables

            -> Created inside the methods and blocks / constructors 

            -> Used for temporary calculations 

            -> Once execution is completed, value become obsolete 

            -> Variables should be declared and initialized

        -> Static Variables (Global / Class)

            -> Created inside the class and outside the method, with static keyword

            -> Static Variables belongs to class not objects 

            -> Used for static/fixed values (common data)

            -> Variables should be declared and initialized

            -> To access static variables we use Classname.variable

    Type        Declared            BelongsTo       Memory          DefaultValue
    local       method/block        method/block    Stack           Must initialize
    instance    class(no static)    Object          Heap            Yes 
    static      class(static)       Class           MethodArea      Yes 


17th Sep 2025
=============

-> Methods : Task / Action we need methods

-> Methods have signature 

    -> Simple 

        accessModifier returnType methodName ParameterList 
        {
            // method body
        }

    -> Complex 

        accessModifier static/non-static returnType methodName ParameterList throws Exceptions
        {
            // method body
        }

19th Sep 2025
=============

-> Constructors

    -> Method : Block of code that Performs a task 

    -> Constructor : Block of code that initialize default values (special task)

        -> Constructor is a special method that is automatically called, when object is created

    -> Normal Methods (instance methods) what we learnt cannot be automatically called, we need to call them 

        -> create object 
        -> call method

    -> In constructors, when we create object automatically constructor is called

    -> Constructors are Mainly used for 

        -> initialize default values
        -> set start up value (perform start up operations)

    -> NOTE :

        -> Constructors name should always be class name only, unlike methods 

        -> Constructor will not have return type 

        -> Automatically invoked, unlike methods 

    -> Types Of Constructors

        -> Implicit / Default Constructors

            -> Used to set all objects with same values 

        -> Explicit / Parameterized Constructors

            -> Used to set different objects with different values 

            -> Constructor Overloading (Polymorphism)


    -> this 

        -> this is a keyword, that refers to current instance 

        -> to avoid ambiguity, between variables and Parameters 

        -> to distinguish between variables and Parameters with same name use this keyword

    -> Constructor Overloading

        -> Constructor Overloading in java is a concept where you define 
            multiple Constructors with same name and different Parameters

        -> Based on 

            -> number of parameters
            -> types of parameters
            -> order of parameters

            -> initialization may change  or logic may change

22nd Sep 2025
=============

    -> this() : constructor call for calling another constructor

    -> Using LMS App use case will understand, how constructors can be connected 
        with default data 

    